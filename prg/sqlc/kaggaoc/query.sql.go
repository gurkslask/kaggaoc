// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package kaggaoc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO completed (
  challenge, user_id
) VALUES (
  $1, $2
)
RETURNING complete_id, user_id, challenge
`

type CreateChallengeParams struct {
	Challenge int32
	UserID    pgtype.Int4
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Completed, error) {
	row := q.db.QueryRow(ctx, createChallenge, arg.Challenge, arg.UserID)
	var i Completed
	err := row.Scan(&i.CompleteID, &i.UserID, &i.Challenge)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password_hash, email, seed
) VALUES (
  $1, $2, $3, $4
)
RETURNING user_id, username, password_hash, email, seed
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Email        string
	Seed         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Seed,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Seed,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getChallengeCompleted = `-- name: GetChallengeCompleted :many
SELECT challenge FROM completed
WHERE user_id = $1
`

func (q *Queries) GetChallengeCompleted(ctx context.Context, userID pgtype.Int4) ([]int32, error) {
	rows, err := q.db.Query(ctx, getChallengeCompleted, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var challenge int32
		if err := rows.Scan(&challenge); err != nil {
			return nil, err
		}
		items = append(items, challenge)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password_hash, email, seed FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Seed,
	)
	return i, err
}

const getUserId = `-- name: GetUserId :one
SELECT user_id FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserId(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserId, username)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, username, password_hash, email, seed FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.Seed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set username = $2,
  email = $3
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID   int32
	Username string
	Email    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.UserID, arg.Username, arg.Email)
	return err
}
